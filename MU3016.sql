CREATE OR REPLACE PROCEDURE SFCORCL.SP_SFCMU3016(ORDNO IN VARCHAR2, LINECD IN VARCHAR2, REASON IN VARCHAR2, IP IN VARCHAR2)
/*========================================================================
Program name  : SFCMU301p
Description   :	Return All Parts Before Process
Spec          : YUPIN
Programmer    : T.WUTTIPONG
Create Date   : 24/02/2017
========================================================================*/
AS
	CURSOR CURSOR_ IS
		SELECT
			QST60_PID,
            SUM( QST60_INQTY ) AS BAL
           FROM
             QSTMATSN
           WHERE
             QST60_INQTY = 1
             AND  QST60_ORDNO = ORDNO
             AND QST60_LINECD = LINECD
             AND QST60_SNTYP = 'HDD'
             AND QST60_OUTQTY > 0
             AND NOT EXISTS(
			 	SELECT SFCEDASN.SFC30_ORDNO FROM SFCEDASN WHERE SFCEDASN.SFC30_ORDNO = ORDNO GROUP BY SFCEDASN.SFC30_ORDNO
			 )
          GROUP BY QST60_PID;
     SNTYP QSTMATSN.QST60_SNTYP%type;
     PGID VARCHAR2(100) := 'MU3016';
     PID QSTMATSN.QST60_PID%type;
     INQTY QSTMATSN.QST60_INQTY%type;
     NROW NUMBER := 0;
BEGIN
	SAVEPOINT start_tran;
--		FOR MATSN IN CURSOR_ LOOP
--			UPDATE QSTMATSN SET
--							QST60_INQTY = 100,
--							QST60_PROGRAMID = 'MU3016',
--	  						QST60_IPADDRESS = '129.3.25.60'
--			WHERE QST60_PID = MATSN.QST60_PID AND QST60_STATUS= 'WH';
--			DBMS_OUTPUT.PUT_LINE('PID: ' || MATSN.QST60_PID || 'BAL: ' || MATSN.BAL);
--			DELETE FROM QSTMATSN WHERE QST60_PID = MATSN.QST60_PID AND QST60_STATUS <> 'WH';

--		END LOOP;
	SELECT COUNT(*) NROW INTO NROW
	           FROM
	             QSTMATSN
	           WHERE QST60_ORDNO = ORDNO
	             AND QST60_LINECD = LINECD
	             AND NOT EXISTS(
				 	SELECT SFCEDASN.SFC30_ORDNO FROM SFCEDASN WHERE SFCEDASN.SFC30_ORDNO = ORDNO GROUP BY SFCEDASN.SFC30_ORDNO
				 );

	IF (NROW > 0) THEN
	-- CREATE CSV FILE
		INSERT INTO SFC_ERP_LOGCSV(
				EXP_TEMPLATE,
				ERP_JOBORDER,
				ERP_CUSORDER,
				ERP_CUSPARTCD,
				ERP_CUSPARTCD2,
				ERP_OUTQTY,
				ERP_LOTNO,
				ERP_PRODDATE,
				ERP_PALLETID,
				ERP_SERIALNO,
				ERP_WHCODE,
				ERP_LOCODE,
				ERP_PROCESSCODE,
				ERP_PID,
				ERP_EXCDATE
			)
			SELECT
				'KittingRes' AS TEMPLATE,
				MAT.QST60_ORDNO 											AS ORDNO,
				ORD.QST10_JOBORDER 											AS JOBORDER,
				MAT.QST60_PARTCD 											AS PARTCD,
				MAT.QST60_WDPARTCD 											AS WDPARTCD,
				MAT.QST60_OUTQTY * -1              							AS OUTQTY,
				MAT.QST60_LOTNO 											AS LOTNO,
				MAT.QST60_PRODDATE 											AS DATECODE,
				MAT.QST60_PALLET 											AS PALLET,
				MAT.QST60_HDDSN												AS SN,
				MAT.QST60_WHCODE											AS WHCODE,
				'D01' 														AS LOCCODE,
				CASE WHEN MAT.QST60_WHCODE = 'W500' THEN '0' ELSE 'A' END 	AS PROCESSCODE,
				MAT.QST60_PID												AS MID,
				nvl(MAT.QST60_OUTDATE,CURRENT_TIMESTAMP) 					AS EXECTIME
				FROM QSTMATSN MAT
				LEFT JOIN QSTORD ORD ON MAT.QST60_ORDNO = ORD.QST10_ORDNO
        WHERE MAT.QST60_ORDNO = ORDNO AND MAT.QST60_LINECD = LINECD;

		OPEN CURSOR_;
		   LOOP
		      FETCH CURSOR_ into PID, INQTY;
		      EXIT WHEN CURSOR_%notfound;

		    	UPDATE QSTMATSN SET
							QST60_INQTY = QST60_INQTY + INQTY,
							QST60_PROGRAMID = PGID,
	  						QST60_IPADDRESS = IP
	  						WHERE QST60_PID = PID AND QST60_OUTQTY = 0; -- OR QST60_OUTQTY = 0

			  	IF (SQL%ROWCOUNT <= 0) THEN
				  	INSERT INTO QSTMATSN(
				  		QST60_EMPNO,
						QST60_PALLET,
		--					QST60_CARTON,
		--					QST60_MODEL,
						QST60_PARTCD,
						QST60_HDDCOO,
						QST60_SNTYP,
						QST60_HDDSN,
						QST60_LOTNO,
						QST60_MDLLINE,
						QST60_PRODDATE,
						QST60_INQTY,
						QST60_DCMCD,
						QST60_PLACE,
						QST60_RECTIME,
						QST60_OUTDATE,
						QST60_ORDNO,
						QST60_LINECD,
						QST60_INTIME,
		--					QST60_UPDUSRCD,
						QST60_OUTQTY,
		--					QST60_FLAGOUT,
		--					QST60_COMPOMENT,
						QST60_PID,
						QST60_MAKRCD,
		--					QST60_EMPPAY,
		--					QST60_PARTMK,
		--					QST60_FLAGQCI,
						QST60_REV,
		--					QST60_STPFLG,
						QST60_INVNO,
		--					QST60_TESTFLG,
		--					QST60_LINETIME,
		--					QST60_REMARK,
						QST60_STKTYP,
		--					QST60_CUSPO,
		--					QST60_CUSPOLINE,
						QST60_INVPO,
						QST60_INVPOLINE,
						QST60_INVLINE,
						QST60_WDPARTCD,
						QST60_MAKRNM,
						QST60_WHCODE,
						QST60_LOCCODE,
						QST60_TOWHCODE,
						QST60_TOLOCCODE,
		--					QST11_CUSTPO,
						QST60_STATUS,
		--					QST60_IRNO,
						QST60_SENTTOERP,
						QST60_ORGMID,

						QST60_PROGRAMID,
						QST60_IPADDRESS
				  	) SELECT
				  		QST60_EMPNO,
						QST60_PALLET,
		--					'' AS QST60_CARTON,
		--					'' AS QST60_MODEL,
						QST60_PARTCD,
						QST60_HDDCOO,
						QST60_SNTYP,
						'' AS QST60_HDDSN,
						QST60_LOTNO,
						QST60_MDLLINE,
						QST60_PRODDATE,
						INQTY,
						'' AS QST60_DCMCD,
						QST60_PLACE,
						QST60_RECTIME,
						'' AS QST60_OUTDATE,
						'' AS QST60_ORDNO,
						'' AS QST60_LINECD,
						QST60_INTIME,
		--					'' AS QST60_UPDUSRCD,
						0 AS QST60_OUTQTY,
		--					'' AS QST60_FLAGOUT,
		--					'' AS QST60_COMPOMENT,
						QST60_PID,
						QST60_MAKRCD,
		--					'' AS QST60_EMPPAY,
		--					'' AS QST60_PARTMK,
		--					'' AS QST60_FLAGQCI,
						QST60_REV,
		--					'' AS QST60_STPFLG,
						QST60_INVNO,
		--					'' AS QST60_TESTFLG,
		--					'' AS QST60_LINETIME,
		--					'' AS QST60_REMARK,
						QST60_STKTYP,
		--					'' AS QST60_CUSPO,
		--					'' AS QST60_CUSPOLINE,
						QST60_INVPO,
						QST60_INVPOLINE,
						QST60_INVLINE,
						QST60_WDPARTCD,
						QST60_MAKRNM,
						QST60_WHCODE,
						QST60_LOCCODE,
						QST60_TOWHCODE,
						QST60_TOLOCCODE,
		--					'' AS QST11_CUSTPO,
						'WH',
		--					'' AS QST60_IRNO,
						QST60_SENTTOERP,
						QST60_ORGMID,

						PGID,
						IP
				  	FROM QSTMATSN WHERE QST60_PID = PID AND ROWNUM = 1;

			  	END IF;
		    --dbms_output.put_line(PID || ' ' || INQTY);

		   END LOOP;
		   IF (CURSOR_%ROWCOUNT > 0) THEN -- SQL%ROWCOUNT
		   	DELETE FROM QSTMATSN WHERE QST60_ORDNO = ORDNO AND QST60_LINECD = LINECD AND QST60_SNTYP ='HDD' AND QST60_OUTQTY > 0;
		   END IF;

		CLOSE CURSOR_;

		UPDATE QSTMATSN SET
						QST60_OUTQTY = '0',
						QST60_OUTDATE = NULL,
						QST60_ORDNO = NULL,
						QST60_LINECD = NULL,
						QST60_STATUS ='RTN',
						QST60_PROGRAMID = PGID,
						QST60_IPADDRESS = IP
		WHERE QST60_ORDNO = ORDNO AND QST60_LINECD = LINECD AND QST60_OUTQTY > 0 AND NVL(QST60_SNTYP,' ') <> 'HDD';

	END IF;

	DELETE QSTMATDET WHERE QST51_ORDNO = ORDNO;
	UPDATE QSTSDU SET QST30_UPDFLG = NULL WHERE QST30_ORDNO = ORDNO;
	INSERT INTO QSTORDCAN VALUES(ORDNO, LINECD, REASON, 'NO KITOUT', sysdate);

	EXCEPTION
	  WHEN OTHERS THEN
	    ROLLBACK TO start_tran;
	    RAISE;
END;
